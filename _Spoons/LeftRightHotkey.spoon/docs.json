[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "This spoon addresses a limitation within the `hs.hotkey` module that allows the creation of hotkeys bound to specific left or right keyboard modifiers while leaving the other side free.",
    "Constructor" : [

    ],
    "doc" : "This spoon addresses a limitation within the `hs.hotkey` module that allows the creation of hotkeys bound to specific left or right keyboard modifiers while leaving the other side free.\n\nThis is accomplished by creating unactivated hotkeys for each definition and using an `hs.eventtap` watcher to detect when modifier keys are pressed and conditionally activating only those hotkeys which correspond to the left or right modifiers currently active as specified by the `bind` and `new` methods of this spoon.\n\nThe `LeftRightHotkeyObject` that is returned by [LeftRightHotkey:new](#new) and [LeftRightHotkey:bind](#bind) supports the following methods in a manner similar to the `hs.hotkey` equivalents:\n\n * `LeftRightHotkeyObject:enable()`   -- enables the registered hotkey.\n * `LeftRightHotkeyObject:disable()`  -- disables the registered hotkey.\n * `LeftRightHotkeyObject:delete()`   -- deletes the registered hotkey.\n * `LeftRightHotkeyObject:isEnabled() -- returns a boolean value specifying whether the hotkey is currently enabled (true) or disabled (false)\n\nLike all Spoons, don't forget to use the [LeftRightHotkey:start()](#start) method to activate the modifier key watcher.\n\nDownload: `svn export https:\/\/github.com\/asmagill\/hammerspoon-config-take2\/trunk\/_Spoons\/LeftRightHotkey.spoon`",
    "Method" : [
      {
        "doc" : "Create a new hotkey with the specified left\/right specific modifiers.\n\nParameters:\n * mods - A table containing as elements the keyboard modifiers required, which should be one or more of the following:\n   * \"lCmd\", \"lCommand\", or \"l⌘\" for the left Command modifier\n   * \"rCmd\", \"rCommand\", or \"r⌘\" for the right Command modifier\n   * \"lCtrl\", \"lControl\" or \"l⌃\" for the left Control modifier\n   * \"rCtrl\", \"rControl\" or \"r⌃\" for the right Control modifier\n   * \"lAlt\", \"lOpt\", \"lOption\" or \"l⌥\" for the Option left modifier\n   * \"rAlt\", \"rOpt\", \"rOption\" or \"r⌥\" for the Option right modifier\n   * \"lShift\" or \"l⇧\" for the left Shift modifier\n   * \"rShift\" or \"r⇧\" for the right Shift modifier\n * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number\n * message - (optional) A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered; if omitted, no alert will be shown\n * pressedfn - A function that will be called when the hotkey has been pressed, or nil\n * releasedfn - A function that will be called when the hotkey has been released, or nil\n * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil\n\nReturns:\n * a new, initially disabled, hotkey with the specified left\/right modifiers.\n\nNotes:\n * The modifiers table is adjusted for use when conditionally activating the appropriate hotkeys based on the current modifiers in effect, but the other arguments are passed to `hs.hotkey.new` as is and any caveats or considerations outlined there also apply here.",
        "stripped_doc" : [
          "Create a new hotkey with the specified left\/right specific modifiers.",
          ""
        ],
        "parameters" : [
          " * mods - A table containing as elements the keyboard modifiers required, which should be one or more of the following:",
          "   * \"lCmd\", \"lCommand\", or \"l⌘\" for the left Command modifier",
          "   * \"rCmd\", \"rCommand\", or \"r⌘\" for the right Command modifier",
          "   * \"lCtrl\", \"lControl\" or \"l⌃\" for the left Control modifier",
          "   * \"rCtrl\", \"rControl\" or \"r⌃\" for the right Control modifier",
          "   * \"lAlt\", \"lOpt\", \"lOption\" or \"l⌥\" for the Option left modifier",
          "   * \"rAlt\", \"rOpt\", \"rOption\" or \"r⌥\" for the Option right modifier",
          "   * \"lShift\" or \"l⇧\" for the left Shift modifier",
          "   * \"rShift\" or \"r⇧\" for the right Shift modifier",
          " * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number",
          " * message - (optional) A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered; if omitted, no alert will be shown",
          " * pressedfn - A function that will be called when the hotkey has been pressed, or nil",
          " * releasedfn - A function that will be called when the hotkey has been released, or nil",
          " * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil",
          ""
        ],
        "name" : "new",
        "notes" : [
          " * The modifiers table is adjusted for use when conditionally activating the appropriate hotkeys based on the current modifiers in effect, but the other arguments are passed to `hs.hotkey.new` as is and any caveats or considerations outlined there also apply here."
        ],
        "signature" : "LeftRightHotkey:new(mods, key, [message,] pressedfn, releasedfn, repeatfn) -> LeftRightHotkeyObject",
        "type" : "Method",
        "returns" : [
          " * a new, initially disabled, hotkey with the specified left\/right modifiers.",
          ""
        ],
        "desc" : "Create a new hotkey with the specified left\/right specific modifiers.",
        "def" : "LeftRightHotkey:new(mods, key, [message,] pressedfn, releasedfn, repeatfn) -> LeftRightHotkeyObject"
      },
      {
        "doc" : "Create and enable a new hotkey with the specified left\/right specific modifiers.\n\nParameters:\nParameters:\n * mods - A table containing as elements the keyboard modifiers required, which should be one or more of the following:\n   * \"lCmd\", \"lCommand\", or \"l⌘\" for the left Command modifier\n   * \"rCmd\", \"rCommand\", or \"r⌘\" for the right Command modifier\n   * \"lCtrl\", \"lControl\" or \"l⌃\" for the left Control modifier\n   * \"rCtrl\", \"rControl\" or \"r⌃\" for the right Control modifier\n   * \"lAlt\", \"lOpt\", \"lOption\" or \"l⌥\" for the Option left modifier\n   * \"rAlt\", \"rOpt\", \"rOption\" or \"r⌥\" for the Option right modifier\n   * \"lShift\" or \"l⇧\" for the left Shift modifier\n   * \"rShift\" or \"r⇧\" for the right Shift modifier\n * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number\n * message - (optional) A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered; if omitted, no alert will be shown\n * pressedfn - A function that will be called when the hotkey has been pressed, or nil\n * releasedfn - A function that will be called when the hotkey has been released, or nil\n * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil\n\nReturns:\n * a new enabled hotkey with the specified left\/right modifiers.\n\nNotes:\n * This function is just a wrapper that performs `LeftRightHotkey:new(...):enable()`\n * The modifiers table is adjusted for use when conditionally activating the appropriate hotkeys based on the current modifiers in effect, but the other arguments are passed to `hs.hotkey.bind` as is and any caveats or considerations outlined there also apply here.",
        "stripped_doc" : [
          "Create and enable a new hotkey with the specified left\/right specific modifiers.",
          ""
        ],
        "parameters" : [
          " * mods - A table containing as elements the keyboard modifiers required, which should be one or more of the following:",
          "   * \"lCmd\", \"lCommand\", or \"l⌘\" for the left Command modifier",
          "   * \"rCmd\", \"rCommand\", or \"r⌘\" for the right Command modifier",
          "   * \"lCtrl\", \"lControl\" or \"l⌃\" for the left Control modifier",
          "   * \"rCtrl\", \"rControl\" or \"r⌃\" for the right Control modifier",
          "   * \"lAlt\", \"lOpt\", \"lOption\" or \"l⌥\" for the Option left modifier",
          "   * \"rAlt\", \"rOpt\", \"rOption\" or \"r⌥\" for the Option right modifier",
          "   * \"lShift\" or \"l⇧\" for the left Shift modifier",
          "   * \"rShift\" or \"r⇧\" for the right Shift modifier",
          " * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number",
          " * message - (optional) A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered; if omitted, no alert will be shown",
          " * pressedfn - A function that will be called when the hotkey has been pressed, or nil",
          " * releasedfn - A function that will be called when the hotkey has been released, or nil",
          " * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil",
          ""
        ],
        "name" : "bind",
        "notes" : [
          " * This function is just a wrapper that performs `LeftRightHotkey:new(...):enable()`",
          " * The modifiers table is adjusted for use when conditionally activating the appropriate hotkeys based on the current modifiers in effect, but the other arguments are passed to `hs.hotkey.bind` as is and any caveats or considerations outlined there also apply here."
        ],
        "signature" : "LeftRightHotkey:bind(mods, key, [message,] pressedfn, releasedfn, repeatfn) -> LeftRightHotkeyObject",
        "type" : "Method",
        "returns" : [
          " * a new enabled hotkey with the specified left\/right modifiers.",
          ""
        ],
        "desc" : "Create and enable a new hotkey with the specified left\/right specific modifiers.",
        "def" : "LeftRightHotkey:bind(mods, key, [message,] pressedfn, releasedfn, repeatfn) -> LeftRightHotkeyObject"
      },
      {
        "doc" : "Starts the processing or displays for the LeftRightHotkey spoon\n\nParameters:\n * None\n\nReturns:\n * the LeftRightHotkey spoon object",
        "stripped_doc" : [
          "Starts the processing or displays for the LeftRightHotkey spoon",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "name" : "start",
        "notes" : [

        ],
        "signature" : "LeftRightHotkey:start() -> self",
        "type" : "Method",
        "returns" : [
          " * the LeftRightHotkey spoon object"
        ],
        "desc" : "Starts the processing or displays for the LeftRightHotkey spoon",
        "def" : "LeftRightHotkey:start() -> self"
      },
      {
        "doc" : "Stops the processing and\/or removes the displays generated by the LeftRightHotkey spoon\n\nParameters:\n * None\n\nReturns:\n * the LeftRightHotkey spoon object",
        "stripped_doc" : [
          "Stops the processing and\/or removes the displays generated by the LeftRightHotkey spoon",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "name" : "stop",
        "notes" : [

        ],
        "signature" : "LeftRightHotkey:stop() -> self",
        "type" : "Method",
        "returns" : [
          " * the LeftRightHotkey spoon object"
        ],
        "desc" : "Stops the processing and\/or removes the displays generated by the LeftRightHotkey spoon",
        "def" : "LeftRightHotkey:stop() -> self"
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "Create and enable a new hotkey with the specified left\/right specific modifiers.\n\nParameters:\nParameters:\n * mods - A table containing as elements the keyboard modifiers required, which should be one or more of the following:\n   * \"lCmd\", \"lCommand\", or \"l⌘\" for the left Command modifier\n   * \"rCmd\", \"rCommand\", or \"r⌘\" for the right Command modifier\n   * \"lCtrl\", \"lControl\" or \"l⌃\" for the left Control modifier\n   * \"rCtrl\", \"rControl\" or \"r⌃\" for the right Control modifier\n   * \"lAlt\", \"lOpt\", \"lOption\" or \"l⌥\" for the Option left modifier\n   * \"rAlt\", \"rOpt\", \"rOption\" or \"r⌥\" for the Option right modifier\n   * \"lShift\" or \"l⇧\" for the left Shift modifier\n   * \"rShift\" or \"r⇧\" for the right Shift modifier\n * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number\n * message - (optional) A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered; if omitted, no alert will be shown\n * pressedfn - A function that will be called when the hotkey has been pressed, or nil\n * releasedfn - A function that will be called when the hotkey has been released, or nil\n * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil\n\nReturns:\n * a new enabled hotkey with the specified left\/right modifiers.\n\nNotes:\n * This function is just a wrapper that performs `LeftRightHotkey:new(...):enable()`\n * The modifiers table is adjusted for use when conditionally activating the appropriate hotkeys based on the current modifiers in effect, but the other arguments are passed to `hs.hotkey.bind` as is and any caveats or considerations outlined there also apply here.",
        "stripped_doc" : [
          "Create and enable a new hotkey with the specified left\/right specific modifiers.",
          ""
        ],
        "parameters" : [
          " * mods - A table containing as elements the keyboard modifiers required, which should be one or more of the following:",
          "   * \"lCmd\", \"lCommand\", or \"l⌘\" for the left Command modifier",
          "   * \"rCmd\", \"rCommand\", or \"r⌘\" for the right Command modifier",
          "   * \"lCtrl\", \"lControl\" or \"l⌃\" for the left Control modifier",
          "   * \"rCtrl\", \"rControl\" or \"r⌃\" for the right Control modifier",
          "   * \"lAlt\", \"lOpt\", \"lOption\" or \"l⌥\" for the Option left modifier",
          "   * \"rAlt\", \"rOpt\", \"rOption\" or \"r⌥\" for the Option right modifier",
          "   * \"lShift\" or \"l⇧\" for the left Shift modifier",
          "   * \"rShift\" or \"r⇧\" for the right Shift modifier",
          " * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number",
          " * message - (optional) A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered; if omitted, no alert will be shown",
          " * pressedfn - A function that will be called when the hotkey has been pressed, or nil",
          " * releasedfn - A function that will be called when the hotkey has been released, or nil",
          " * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil",
          ""
        ],
        "name" : "bind",
        "notes" : [
          " * This function is just a wrapper that performs `LeftRightHotkey:new(...):enable()`",
          " * The modifiers table is adjusted for use when conditionally activating the appropriate hotkeys based on the current modifiers in effect, but the other arguments are passed to `hs.hotkey.bind` as is and any caveats or considerations outlined there also apply here."
        ],
        "signature" : "LeftRightHotkey:bind(mods, key, [message,] pressedfn, releasedfn, repeatfn) -> LeftRightHotkeyObject",
        "type" : "Method",
        "returns" : [
          " * a new enabled hotkey with the specified left\/right modifiers.",
          ""
        ],
        "desc" : "Create and enable a new hotkey with the specified left\/right specific modifiers.",
        "def" : "LeftRightHotkey:bind(mods, key, [message,] pressedfn, releasedfn, repeatfn) -> LeftRightHotkeyObject"
      },
      {
        "doc" : "Create a new hotkey with the specified left\/right specific modifiers.\n\nParameters:\n * mods - A table containing as elements the keyboard modifiers required, which should be one or more of the following:\n   * \"lCmd\", \"lCommand\", or \"l⌘\" for the left Command modifier\n   * \"rCmd\", \"rCommand\", or \"r⌘\" for the right Command modifier\n   * \"lCtrl\", \"lControl\" or \"l⌃\" for the left Control modifier\n   * \"rCtrl\", \"rControl\" or \"r⌃\" for the right Control modifier\n   * \"lAlt\", \"lOpt\", \"lOption\" or \"l⌥\" for the Option left modifier\n   * \"rAlt\", \"rOpt\", \"rOption\" or \"r⌥\" for the Option right modifier\n   * \"lShift\" or \"l⇧\" for the left Shift modifier\n   * \"rShift\" or \"r⇧\" for the right Shift modifier\n * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number\n * message - (optional) A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered; if omitted, no alert will be shown\n * pressedfn - A function that will be called when the hotkey has been pressed, or nil\n * releasedfn - A function that will be called when the hotkey has been released, or nil\n * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil\n\nReturns:\n * a new, initially disabled, hotkey with the specified left\/right modifiers.\n\nNotes:\n * The modifiers table is adjusted for use when conditionally activating the appropriate hotkeys based on the current modifiers in effect, but the other arguments are passed to `hs.hotkey.new` as is and any caveats or considerations outlined there also apply here.",
        "stripped_doc" : [
          "Create a new hotkey with the specified left\/right specific modifiers.",
          ""
        ],
        "parameters" : [
          " * mods - A table containing as elements the keyboard modifiers required, which should be one or more of the following:",
          "   * \"lCmd\", \"lCommand\", or \"l⌘\" for the left Command modifier",
          "   * \"rCmd\", \"rCommand\", or \"r⌘\" for the right Command modifier",
          "   * \"lCtrl\", \"lControl\" or \"l⌃\" for the left Control modifier",
          "   * \"rCtrl\", \"rControl\" or \"r⌃\" for the right Control modifier",
          "   * \"lAlt\", \"lOpt\", \"lOption\" or \"l⌥\" for the Option left modifier",
          "   * \"rAlt\", \"rOpt\", \"rOption\" or \"r⌥\" for the Option right modifier",
          "   * \"lShift\" or \"l⇧\" for the left Shift modifier",
          "   * \"rShift\" or \"r⇧\" for the right Shift modifier",
          " * key - A string containing the name of a keyboard key (as found in [hs.keycodes.map](hs.keycodes.html#map) ), or a raw keycode number",
          " * message - (optional) A string containing a message to be displayed via `hs.alert()` when the hotkey has been triggered; if omitted, no alert will be shown",
          " * pressedfn - A function that will be called when the hotkey has been pressed, or nil",
          " * releasedfn - A function that will be called when the hotkey has been released, or nil",
          " * repeatfn - A function that will be called when a pressed hotkey is repeating, or nil",
          ""
        ],
        "name" : "new",
        "notes" : [
          " * The modifiers table is adjusted for use when conditionally activating the appropriate hotkeys based on the current modifiers in effect, but the other arguments are passed to `hs.hotkey.new` as is and any caveats or considerations outlined there also apply here."
        ],
        "signature" : "LeftRightHotkey:new(mods, key, [message,] pressedfn, releasedfn, repeatfn) -> LeftRightHotkeyObject",
        "type" : "Method",
        "returns" : [
          " * a new, initially disabled, hotkey with the specified left\/right modifiers.",
          ""
        ],
        "desc" : "Create a new hotkey with the specified left\/right specific modifiers.",
        "def" : "LeftRightHotkey:new(mods, key, [message,] pressedfn, releasedfn, repeatfn) -> LeftRightHotkeyObject"
      },
      {
        "doc" : "Starts the processing or displays for the LeftRightHotkey spoon\n\nParameters:\n * None\n\nReturns:\n * the LeftRightHotkey spoon object",
        "stripped_doc" : [
          "Starts the processing or displays for the LeftRightHotkey spoon",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "name" : "start",
        "notes" : [

        ],
        "signature" : "LeftRightHotkey:start() -> self",
        "type" : "Method",
        "returns" : [
          " * the LeftRightHotkey spoon object"
        ],
        "desc" : "Starts the processing or displays for the LeftRightHotkey spoon",
        "def" : "LeftRightHotkey:start() -> self"
      },
      {
        "doc" : "Stops the processing and\/or removes the displays generated by the LeftRightHotkey spoon\n\nParameters:\n * None\n\nReturns:\n * the LeftRightHotkey spoon object",
        "stripped_doc" : [
          "Stops the processing and\/or removes the displays generated by the LeftRightHotkey spoon",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "name" : "stop",
        "notes" : [

        ],
        "signature" : "LeftRightHotkey:stop() -> self",
        "type" : "Method",
        "returns" : [
          " * the LeftRightHotkey spoon object"
        ],
        "desc" : "Stops the processing and\/or removes the displays generated by the LeftRightHotkey spoon",
        "def" : "LeftRightHotkey:stop() -> self"
      }
    ],
    "name" : "LeftRightHotkey"
  }
]
