[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "A table specifying the service types which the BonjourLauncher looks for on your network and defines how to display and launch discovered services.\n\nNotes:\n * This table should be an array of tables, which each table in the array specifying a service type.\n\n * Changes to this variable will be reflected the next time the BonjourLauncher chooser window is shown -- if it is currently visible when changes are made, the new changes will *NOT* be reflected in the currently open chooser.\n\n * Each service type table entry should contain one or more of the following keys:\n   * `type`    - a required string specifying the type of advertisement to search for with this entry. Example service types can be seen in `hs.bonjour.serviceTypes`.\n   * `label`   - an optional string, defaulting to the value for `type`, specifying the label for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customeized the toolbar's visual properties.\n   * `image`   - an optional `hs.image` object specifying the image to display for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customeized the toolbar's visual properties.\n   * `text`    - an optional string, defaulting to \"%name%\", specifying the text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.\n   * `subText` - an optional string, specifying the sub-text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.\n   * `filter`  - an optional function which can be used to filter out advertised services which you do not wish to include in this service type collection. The function should accept one parameter, the `hs.bonjour.service` object for the discovered service, and should return `true` if the service is to be included or `false` if the service is to be omitted.\n   * `url`     - The url to open with `hs.urlevent.openURL`. If this is present, `cmd` and `fn` are ignored.\n   * `cmd`     - The command to execute with `hs.execute`. If this is present, `fn` is ignored.\n   * `fn`      - The function to invoke. THis function should expect one argument, the `hs.bonjour.service` object for the selected service. Any return value for the function is ignored.\n\n * Note that only `type` and one of `url`, `cmd`, or `fn` must be provided -- everything else is optional.\n\n * If the string values for `text`, `subText`, `url`, and `cmd` contain any of the following substrings, the substring will be replaced as described below:\n   * `%address%`   - Will be replaced with the first address discovered for the service when it is resolved.\n     * `%address4%` - Variant of `%address%` which is replaced with the first IPv4 address or \"n\/a\" if one cannot be found.\n     * `%address6%` - Variant of `%address%` which is replaced with the first IPv6 address or \"n\/a\" if one cannot be found.\n   * `%domain%`    - Will be replaced with the domain the service was found in, usually \"local.\"\n   * `%hostname%`  - Will be replaced with the hostname on which the service is being offered\n   * `%name%`      - Will be replaced with the name of the advertised service.\n   * `%port%`      - Will be replaced with the port number on the machine that the service is provided on.\n   * `%txt:<key>%` - Will be replaced with the value for the specified `<key>` of the text records associated with the service. To see the list of text record key-value pairs for a specific service, you can right click on it while it is being displayed in the BonjourLauncher chooser window (press the `escape` key to clear it).",
        "desc" : "A table specifying the service types which the BonjourLauncher looks for on your network and defines how to display and launch discovered services.",
        "stripped_doc" : [
          "A table specifying the service types which the BonjourLauncher looks for on your network and defines how to display and launch discovered services.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * This table should be an array of tables, which each table in the array specifying a service type.",
          "",
          " * Changes to this variable will be reflected the next time the BonjourLauncher chooser window is shown -- if it is currently visible when changes are made, the new changes will *NOT* be reflected in the currently open chooser.",
          "",
          " * Each service type table entry should contain one or more of the following keys:",
          "   * `type`    - a required string specifying the type of advertisement to search for with this entry. Example service types can be seen in `hs.bonjour.serviceTypes`.",
          "   * `label`   - an optional string, defaulting to the value for `type`, specifying the label for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customeized the toolbar's visual properties.",
          "   * `image`   - an optional `hs.image` object specifying the image to display for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customeized the toolbar's visual properties.",
          "   * `text`    - an optional string, defaulting to \"%name%\", specifying the text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.",
          "   * `subText` - an optional string, specifying the sub-text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.",
          "   * `filter`  - an optional function which can be used to filter out advertised services which you do not wish to include in this service type collection. The function should accept one parameter, the `hs.bonjour.service` object for the discovered service, and should return `true` if the service is to be included or `false` if the service is to be omitted.",
          "   * `url`     - The url to open with `hs.urlevent.openURL`. If this is present, `cmd` and `fn` are ignored.",
          "   * `cmd`     - The command to execute with `hs.execute`. If this is present, `fn` is ignored.",
          "   * `fn`      - The function to invoke. THis function should expect one argument, the `hs.bonjour.service` object for the selected service. Any return value for the function is ignored.",
          "",
          " * Note that only `type` and one of `url`, `cmd`, or `fn` must be provided -- everything else is optional.",
          "",
          " * If the string values for `text`, `subText`, `url`, and `cmd` contain any of the following substrings, the substring will be replaced as described below:",
          "   * `%address%`   - Will be replaced with the first address discovered for the service when it is resolved.",
          "     * `%address4%` - Variant of `%address%` which is replaced with the first IPv4 address or \"n\/a\" if one cannot be found.",
          "     * `%address6%` - Variant of `%address%` which is replaced with the first IPv6 address or \"n\/a\" if one cannot be found.",
          "   * `%domain%`    - Will be replaced with the domain the service was found in, usually \"local.\"",
          "   * `%hostname%`  - Will be replaced with the hostname on which the service is being offered",
          "   * `%name%`      - Will be replaced with the name of the advertised service.",
          "   * `%port%`      - Will be replaced with the port number on the machine that the service is provided on.",
          "   * `%txt:<key>%` - Will be replaced with the value for the specified `<key>` of the text records associated with the service. To see the list of text record key-value pairs for a specific service, you can right click on it while it is being displayed in the BonjourLauncher chooser window (press the `escape` key to clear it)."
        ],
        "signature" : "BonjourLauncher.templates",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "templates",
        "def" : "BonjourLauncher.templates"
      }
    ],
    "stripped_doc" : [

    ],
    "type" : "Module",
    "desc" : "List advertised services on your network that match defined templates and provide a list for the user to access them.",
    "Deprecated" : [

    ],
    "Constructor" : [

    ],
    "doc" : "List advertised services on your network that match defined templates and provide a list for the user to access them.",
    "Field" : [

    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "A table specifying the service types which the BonjourLauncher looks for on your network and defines how to display and launch discovered services.\n\nNotes:\n * This table should be an array of tables, which each table in the array specifying a service type.\n\n * Changes to this variable will be reflected the next time the BonjourLauncher chooser window is shown -- if it is currently visible when changes are made, the new changes will *NOT* be reflected in the currently open chooser.\n\n * Each service type table entry should contain one or more of the following keys:\n   * `type`    - a required string specifying the type of advertisement to search for with this entry. Example service types can be seen in `hs.bonjour.serviceTypes`.\n   * `label`   - an optional string, defaulting to the value for `type`, specifying the label for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customeized the toolbar's visual properties.\n   * `image`   - an optional `hs.image` object specifying the image to display for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customeized the toolbar's visual properties.\n   * `text`    - an optional string, defaulting to \"%name%\", specifying the text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.\n   * `subText` - an optional string, specifying the sub-text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.\n   * `filter`  - an optional function which can be used to filter out advertised services which you do not wish to include in this service type collection. The function should accept one parameter, the `hs.bonjour.service` object for the discovered service, and should return `true` if the service is to be included or `false` if the service is to be omitted.\n   * `url`     - The url to open with `hs.urlevent.openURL`. If this is present, `cmd` and `fn` are ignored.\n   * `cmd`     - The command to execute with `hs.execute`. If this is present, `fn` is ignored.\n   * `fn`      - The function to invoke. THis function should expect one argument, the `hs.bonjour.service` object for the selected service. Any return value for the function is ignored.\n\n * Note that only `type` and one of `url`, `cmd`, or `fn` must be provided -- everything else is optional.\n\n * If the string values for `text`, `subText`, `url`, and `cmd` contain any of the following substrings, the substring will be replaced as described below:\n   * `%address%`   - Will be replaced with the first address discovered for the service when it is resolved.\n     * `%address4%` - Variant of `%address%` which is replaced with the first IPv4 address or \"n\/a\" if one cannot be found.\n     * `%address6%` - Variant of `%address%` which is replaced with the first IPv6 address or \"n\/a\" if one cannot be found.\n   * `%domain%`    - Will be replaced with the domain the service was found in, usually \"local.\"\n   * `%hostname%`  - Will be replaced with the hostname on which the service is being offered\n   * `%name%`      - Will be replaced with the name of the advertised service.\n   * `%port%`      - Will be replaced with the port number on the machine that the service is provided on.\n   * `%txt:<key>%` - Will be replaced with the value for the specified `<key>` of the text records associated with the service. To see the list of text record key-value pairs for a specific service, you can right click on it while it is being displayed in the BonjourLauncher chooser window (press the `escape` key to clear it).",
        "desc" : "A table specifying the service types which the BonjourLauncher looks for on your network and defines how to display and launch discovered services.",
        "stripped_doc" : [
          "A table specifying the service types which the BonjourLauncher looks for on your network and defines how to display and launch discovered services.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * This table should be an array of tables, which each table in the array specifying a service type.",
          "",
          " * Changes to this variable will be reflected the next time the BonjourLauncher chooser window is shown -- if it is currently visible when changes are made, the new changes will *NOT* be reflected in the currently open chooser.",
          "",
          " * Each service type table entry should contain one or more of the following keys:",
          "   * `type`    - a required string specifying the type of advertisement to search for with this entry. Example service types can be seen in `hs.bonjour.serviceTypes`.",
          "   * `label`   - an optional string, defaulting to the value for `type`, specifying the label for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customeized the toolbar's visual properties.",
          "   * `image`   - an optional `hs.image` object specifying the image to display for the toolbar item under which these advertised services are collected in the BonjourLauncher chooser window. May or may not be displayed if you have customeized the toolbar's visual properties.",
          "   * `text`    - an optional string, defaulting to \"%name%\", specifying the text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.",
          "   * `subText` - an optional string, specifying the sub-text to be displayed for each advertised service listed in this collection in the BonjourLauncher chooser window.",
          "   * `filter`  - an optional function which can be used to filter out advertised services which you do not wish to include in this service type collection. The function should accept one parameter, the `hs.bonjour.service` object for the discovered service, and should return `true` if the service is to be included or `false` if the service is to be omitted.",
          "   * `url`     - The url to open with `hs.urlevent.openURL`. If this is present, `cmd` and `fn` are ignored.",
          "   * `cmd`     - The command to execute with `hs.execute`. If this is present, `fn` is ignored.",
          "   * `fn`      - The function to invoke. THis function should expect one argument, the `hs.bonjour.service` object for the selected service. Any return value for the function is ignored.",
          "",
          " * Note that only `type` and one of `url`, `cmd`, or `fn` must be provided -- everything else is optional.",
          "",
          " * If the string values for `text`, `subText`, `url`, and `cmd` contain any of the following substrings, the substring will be replaced as described below:",
          "   * `%address%`   - Will be replaced with the first address discovered for the service when it is resolved.",
          "     * `%address4%` - Variant of `%address%` which is replaced with the first IPv4 address or \"n\/a\" if one cannot be found.",
          "     * `%address6%` - Variant of `%address%` which is replaced with the first IPv6 address or \"n\/a\" if one cannot be found.",
          "   * `%domain%`    - Will be replaced with the domain the service was found in, usually \"local.\"",
          "   * `%hostname%`  - Will be replaced with the hostname on which the service is being offered",
          "   * `%name%`      - Will be replaced with the name of the advertised service.",
          "   * `%port%`      - Will be replaced with the port number on the machine that the service is provided on.",
          "   * `%txt:<key>%` - Will be replaced with the value for the specified `<key>` of the text records associated with the service. To see the list of text record key-value pairs for a specific service, you can right click on it while it is being displayed in the BonjourLauncher chooser window (press the `escape` key to clear it)."
        ],
        "signature" : "BonjourLauncher.templates",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "templates",
        "def" : "BonjourLauncher.templates"
      },
      {
        "doc" : "Binds hotkeys for the BonjourLauncher spoon\n\nParameters:\n * `mapping` - A table containing hotkey modifier\/key details for one or more of the following commands:\n   * \"show\"   - Show the BonjourLauncher chooser window\n   * \"hide\"   - Hide the BonjourLauncher chooser window\n   * \"toggle\" - Toggles the visibility of the BonjourLauncher window\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:\n   * `command`   - is one of the commands listed above\n   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`\n   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`",
        "desc" : "Binds hotkeys for the BonjourLauncher spoon",
        "stripped_doc" : [
          "Binds hotkeys for the BonjourLauncher spoon",
          ""
        ],
        "parameters" : [
          " * `mapping` - A table containing hotkey modifier\/key details for one or more of the following commands:",
          "   * \"show\"   - Show the BonjourLauncher chooser window",
          "   * \"hide\"   - Hide the BonjourLauncher chooser window",
          "   * \"toggle\" - Toggles the visibility of the BonjourLauncher window",
          ""
        ],
        "notes" : [
          " * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:",
          "   * `command`   - is one of the commands listed above",
          "   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`",
          "   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`"
        ],
        "signature" : "BonjourLauncher:bindHotkeys(mapping) -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object",
          ""
        ],
        "name" : "bindHotkeys",
        "def" : "BonjourLauncher:bindHotkeys(mapping) -> self"
      },
      {
        "doc" : "Hides the BonjourLauncher chooser window and clears any active service queries.\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object",
        "desc" : "Hides the BonjourLauncher chooser window and clears any active service queries.",
        "stripped_doc" : [
          "Hides the BonjourLauncher chooser window and clears any active service queries.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "BonjourLauncher:hide() -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object"
        ],
        "name" : "hide",
        "def" : "BonjourLauncher:hide() -> self"
      },
      {
        "doc" : "Shows the BonjourLauncher chooser window and begins queries for the currently selected service type.\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * Automatically invokes [BonjourLauncher:start()](#start) if this has not already been done.\n\n * Service queries are grouped by type and the currently visible items can be selected by clicking on the type icon or label in the chooser toolbar.",
        "desc" : "Shows the BonjourLauncher chooser window and begins queries for the currently selected service type.",
        "stripped_doc" : [
          "Shows the BonjourLauncher chooser window and begins queries for the currently selected service type.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * Automatically invokes [BonjourLauncher:start()](#start) if this has not already been done.",
          "",
          " * Service queries are grouped by type and the currently visible items can be selected by clicking on the type icon or label in the chooser toolbar."
        ],
        "signature" : "BonjourLauncher:show() -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object",
          ""
        ],
        "name" : "show",
        "def" : "BonjourLauncher:show() -> self"
      },
      {
        "doc" : "Readys the chooser interface for the BonjourLauncher spoon\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * This method is included to conform to the expected Spoon format; it will automatically be invoked by [BonjourLauncher:show](#show) if it hasn't been already.",
        "desc" : "Readys the chooser interface for the BonjourLauncher spoon",
        "stripped_doc" : [
          "Readys the chooser interface for the BonjourLauncher spoon",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * This method is included to conform to the expected Spoon format; it will automatically be invoked by [BonjourLauncher:show](#show) if it hasn't been already."
        ],
        "signature" : "BonjourLauncher:start() -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object",
          ""
        ],
        "name" : "start",
        "def" : "BonjourLauncher:start() -> self"
      },
      {
        "doc" : "Removes the chooser interface for the NonjourLauncher spoon and any lingering service queries\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * This method is included to conform to the expected Spoon format; in general, it should be unnecessary to invoke this method directly as service queries are cleared any time an item is selected from the chooser winfow or the window closes.",
        "desc" : "Removes the chooser interface for the NonjourLauncher spoon and any lingering service queries",
        "stripped_doc" : [
          "Removes the chooser interface for the NonjourLauncher spoon and any lingering service queries",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * This method is included to conform to the expected Spoon format; in general, it should be unnecessary to invoke this method directly as service queries are cleared any time an item is selected from the chooser winfow or the window closes."
        ],
        "signature" : "BonjourLauncher:stop() -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object",
          ""
        ],
        "name" : "stop",
        "def" : "BonjourLauncher:stop() -> self"
      },
      {
        "doc" : "Toggles the visibility of the BonjourLauncher chooser window.\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nBotes:\n * If the chooser window is currently visible, this method will invoke [BonjourLauncher:hide](#hide); otherwise invokes [BonjourLauncher:show](#show).",
        "desc" : "Toggles the visibility of the BonjourLauncher chooser window.",
        "stripped_doc" : [
          "Toggles the visibility of the BonjourLauncher chooser window.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "BonjourLauncher:toggle() -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object",
          "",
          "Botes:",
          " * If the chooser window is currently visible, this method will invoke [BonjourLauncher:hide](#hide); otherwise invokes [BonjourLauncher:show](#show)."
        ],
        "name" : "toggle",
        "def" : "BonjourLauncher:toggle() -> self"
      }
    ],
    "Method" : [
      {
        "doc" : "Readys the chooser interface for the BonjourLauncher spoon\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * This method is included to conform to the expected Spoon format; it will automatically be invoked by [BonjourLauncher:show](#show) if it hasn't been already.",
        "desc" : "Readys the chooser interface for the BonjourLauncher spoon",
        "stripped_doc" : [
          "Readys the chooser interface for the BonjourLauncher spoon",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * This method is included to conform to the expected Spoon format; it will automatically be invoked by [BonjourLauncher:show](#show) if it hasn't been already."
        ],
        "signature" : "BonjourLauncher:start() -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object",
          ""
        ],
        "name" : "start",
        "def" : "BonjourLauncher:start() -> self"
      },
      {
        "doc" : "Removes the chooser interface for the NonjourLauncher spoon and any lingering service queries\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * This method is included to conform to the expected Spoon format; in general, it should be unnecessary to invoke this method directly as service queries are cleared any time an item is selected from the chooser winfow or the window closes.",
        "desc" : "Removes the chooser interface for the NonjourLauncher spoon and any lingering service queries",
        "stripped_doc" : [
          "Removes the chooser interface for the NonjourLauncher spoon and any lingering service queries",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * This method is included to conform to the expected Spoon format; in general, it should be unnecessary to invoke this method directly as service queries are cleared any time an item is selected from the chooser winfow or the window closes."
        ],
        "signature" : "BonjourLauncher:stop() -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object",
          ""
        ],
        "name" : "stop",
        "def" : "BonjourLauncher:stop() -> self"
      },
      {
        "doc" : "Shows the BonjourLauncher chooser window and begins queries for the currently selected service type.\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * Automatically invokes [BonjourLauncher:start()](#start) if this has not already been done.\n\n * Service queries are grouped by type and the currently visible items can be selected by clicking on the type icon or label in the chooser toolbar.",
        "desc" : "Shows the BonjourLauncher chooser window and begins queries for the currently selected service type.",
        "stripped_doc" : [
          "Shows the BonjourLauncher chooser window and begins queries for the currently selected service type.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * Automatically invokes [BonjourLauncher:start()](#start) if this has not already been done.",
          "",
          " * Service queries are grouped by type and the currently visible items can be selected by clicking on the type icon or label in the chooser toolbar."
        ],
        "signature" : "BonjourLauncher:show() -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object",
          ""
        ],
        "name" : "show",
        "def" : "BonjourLauncher:show() -> self"
      },
      {
        "doc" : "Hides the BonjourLauncher chooser window and clears any active service queries.\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object",
        "desc" : "Hides the BonjourLauncher chooser window and clears any active service queries.",
        "stripped_doc" : [
          "Hides the BonjourLauncher chooser window and clears any active service queries.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "BonjourLauncher:hide() -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object"
        ],
        "name" : "hide",
        "def" : "BonjourLauncher:hide() -> self"
      },
      {
        "doc" : "Toggles the visibility of the BonjourLauncher chooser window.\n\nParameters:\n * None\n\nReturns:\n * the BonjourLauncher spoon object\n\nBotes:\n * If the chooser window is currently visible, this method will invoke [BonjourLauncher:hide](#hide); otherwise invokes [BonjourLauncher:show](#show).",
        "desc" : "Toggles the visibility of the BonjourLauncher chooser window.",
        "stripped_doc" : [
          "Toggles the visibility of the BonjourLauncher chooser window.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "BonjourLauncher:toggle() -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object",
          "",
          "Botes:",
          " * If the chooser window is currently visible, this method will invoke [BonjourLauncher:hide](#hide); otherwise invokes [BonjourLauncher:show](#show)."
        ],
        "name" : "toggle",
        "def" : "BonjourLauncher:toggle() -> self"
      },
      {
        "doc" : "Binds hotkeys for the BonjourLauncher spoon\n\nParameters:\n * `mapping` - A table containing hotkey modifier\/key details for one or more of the following commands:\n   * \"show\"   - Show the BonjourLauncher chooser window\n   * \"hide\"   - Hide the BonjourLauncher chooser window\n   * \"toggle\" - Toggles the visibility of the BonjourLauncher window\n\nReturns:\n * the BonjourLauncher spoon object\n\nNotes:\n * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:\n   * `command`   - is one of the commands listed above\n   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`\n   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`",
        "desc" : "Binds hotkeys for the BonjourLauncher spoon",
        "stripped_doc" : [
          "Binds hotkeys for the BonjourLauncher spoon",
          ""
        ],
        "parameters" : [
          " * `mapping` - A table containing hotkey modifier\/key details for one or more of the following commands:",
          "   * \"show\"   - Show the BonjourLauncher chooser window",
          "   * \"hide\"   - Hide the BonjourLauncher chooser window",
          "   * \"toggle\" - Toggles the visibility of the BonjourLauncher window",
          ""
        ],
        "notes" : [
          " * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:",
          "   * `command`   - is one of the commands listed above",
          "   * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`",
          "   * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`"
        ],
        "signature" : "BonjourLauncher:bindHotkeys(mapping) -> self",
        "type" : "Method",
        "returns" : [
          " * the BonjourLauncher spoon object",
          ""
        ],
        "name" : "bindHotkeys",
        "def" : "BonjourLauncher:bindHotkeys(mapping) -> self"
      }
    ],
    "name" : "BonjourLauncher"
  }
]
