--- === ${name} ===
---
--- ${description}
---
--- Download: `svn export https://github.com/asmagill/hammerspoon-config-take2/trunk/_Spoons/${name}.spoon`

local spoons  = require("hs.spoons")
-- local log     = require("hs.logger").new("${name}", settings.get("${name}_logLevel") or "warning")

local obj    = {
-- Metadata
    name      = "${name}",
    author    = "A-Ron",
    homepage  = "https://github.com/asmagill/hammerspoon-config-take2/tree/master/_Spoons/${name}.spoon",
    license   = "MIT - https://opensource.org/licenses/MIT",
    spoonPath = spoons.scriptPath(),
}
-- version is outside of obj table definition to facilitate its auto detection by
-- external documentation generation scripts
obj.version   = "0.1"

-- defines the keys to display in object's __tostring metamethod; define here so subsequent
-- additions are not included in the output
local metadataKeys = {} ; for k, v in fnutils.sortByKeys(obj) do table.insert(metadataKeys, k) end

obj.__index = obj

-- --- ${name}.logger
-- --- Variable
-- --- Logger object used within the Spoon. Can be accessed to set the log level for the messages coming from the Spoon.
-- ---
-- --- Notes:
-- ---  * You can set the default logging level when the spoon loads with `hs.settings.set("${name}_logLevel", lvl)` where `lvl` is either a number between 0 and 5 inclusive, or a string specifying one of the following: 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose'
-- ---  * See `hs.logger` for more information.
-- obj.logger = log


---------- Local Functions And Variables ----------

-- spoon vars are stored in _internals so we can validate them immediately upon change
-- with the spoon's __newindex matamethod (see end of file) rather than get a delayed
-- error because the value is the wrong type
--
-- Note that anything with a key in _internals that starts with an underscore is considered
-- private and is hidden by the __index metamethod defined for the spoon at the end.
local _internals = {}

-- for debugging purposes, should usually be commented out
-- obj._internals = _internals

---------- Spoon Variables ----------

-- The following are wrapped by obj's __index/__newindex metamethods (see end of file)so
-- they appear to work like regular variables and are thus documented as such

-- --- ${name}.some_config_param
-- --- Variable
-- --- Some configuration parameter
-- _internals.some_config_param = true


---------- Spoon Methods ----------

-- --- ${name}:init() -> self
-- --- Method
-- --- Performs any necessary initialization for the ${name} spoon
-- ---
-- --- Parameters:
-- ---  * None
-- ---
-- --- Returns:
-- ---  * the ${name} spoon object
-- ---
-- --- Notes:
-- ---  * This method is invoked by `hs.loadSpoon` when the spoon is loaded for the first time and it should not normally be necessary for the user to invoke this function directly.
-- ---  * This method should do any initial setup that might be required upon loading the spoon, but should *not* actually start any processes or generate any displays -- that should be handled by [${name}:start](#start) when the user chooses.
-- obj.init = function(self)
--     -- in case called as function
--     if self ~= obj then self = obj end
--
--     return self
-- end

--- ${name}:start() -> self
--- Method
--- Starts the processing or displays for the ${name} spoon
---
--- Parameters:
---  * None
---
--- Returns:
---  * the ${name} spoon object
obj.start = function(self)
    -- in case called as function
    if self ~= obj then self = obj end

    return self
end

--- ${name}:stop() -> self
--- Method
--- Stops the processing and/or removes the displays generated by the ${name} spoon
---
--- Parameters:
---  * None
---
--- Returns:
---  * the ${name} spoon object
obj.stop = function(self)
    -- in case called as function
    if self ~= obj then self = obj end

    return self
end

--- ${name}:bindHotkeys(mapping) -> self
--- Method
--- Binds hotkeys for the ${name} spoon
---
--- Parameters:
---  * `mapping` - A table containing hotkey modifier/key details for one or more of the following commands:
---    * "start"  - start monitoring the defined corners
---    * "stop"   - stop monitoring the defined corners
---
--- Returns:
---  * the ${name} spoon object
---
--- Notes:
---  * the `mapping` table is a table of one or more key-value pairs of the format `command = { { modifiers }, key }` where:
---    * `command`   - is one of the commands listed above
---    * `modifiers` - is a table containing keyboard modifiers, as specified in `hs.hotkey.bind()`
---    * `key`       - is a string containing the name of a keyboard key, as specified in `hs.hotkey.bind()`
obj.bindHotkeys = function(self, mapping)
    -- in case called as function
    if self ~= obj then self, mapping = obj, self end

    local def = {
        start  = obj.start,
        stop   = obj.stop,
    }
    spoons.bindHotkeysToSpec(def, mapping)

    return self
end

-- Spoon Metadata definition and object return --

return setmetatable(obj, {
    -- more useful than "table: 0x????????????????"
    __tostring = function(self)
        local result, fieldSize = "", 0
        for i, v in ipairs(metadataKeys) do fieldSize = math.max(fieldSize, #v) end
        for i, v in ipairs(metadataKeys) do
            result = result .. string.format("%-"..tostring(fieldSize) .. "s %s\n", v, self[v])
        end
        return result
    end,

    -- I find it's easier to validate variables once as they're being set then to have to add
    -- a bunch of code everywhere else to verify that the variable was set to a valid/useful
    -- value each and every time I want to use it. Plus the user sees an error immediately
    -- rather then some obscure sort of halfway working until some special combination of things
    -- occurs... (ok, ok, it only reduces those situations but doesn't eliminate them entirely...)

    __index = function(self, key)
        -- variables stored in _internals that start with an underscore are considered private
        if not tostring(key):match("^_") then
            return _internals[key]
        else
            return nil
        end
    end,

    -- handle variable validation here so we don't need to within each method that uses them
    __newindex = function(self, key, value)
        local errMsg = nil
--        if key == "some_config_param" then
--            if type(value) == "boolean" then
--                _internals.some_config_param = value
--            else
--                errMsg = "some_config_param must be a boolean")
--            end
--        elseif key == "... parameter 2 ..." then
--
--        else
            errMsg = tostring(key) .. " is not a recognized paramter of " .. obj.name
--        end

        if errMsg then error(errMsg, 2) end
    end
})
